akka {

  extensions = [akka.persistence.Persistence]

  actor {
    provider = "cluster"
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }

    serialization-bindings {
      "com.example.user.UserNodeEntity$UserCommand" = jackson-json
      "com.example.user.UserNodeEntity$UserReply" = jackson-json
      "com.example.user.UserNodeEntity$UserEvent" = jackson-json
      "com.example.user.UserNodeEntity$UserState" = jackson-json
      "com.example.graph.GraphNodeEntity$GraphNodeEvent" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeState" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeCommand" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeCommandReply" = jackson-cbor
      "com.example.graph.GraphNodeEntity$EdgeDirection" = jackson-cbor
      "com.example.graph.GraphNodeEntity$Edge" = jackson-cbor
      "com.example.graph.GraphNodeEntity$NodeIdRecoMethod" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$NodeInfo" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$NodeReadSideCommand" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$RelatedNodeQueryResponse" = jackson-cbor
      "com.example.graph.readside.ClickReadSideActor$ClickStatCommands" = jackson-cbor
      "com.example.graph.readside.ClickReadSideActor$TrendingNodesResponse" = jackson-cbor
    }
  }

  remote.artery {
    canonical {
      hostname = "<getHostAddress>"
      port = 25520
      port = ${?REMOTE_PORT}
    }
  }


  cluster {
    seed-nodes = [
      "akka://RayDemo@"${SEED_NODE}":25520"]
    roles = [saga]
    sharding.role = "saga"
  }

  management {
    health-checks {
      readiness-path = "health/ready"
      liveness-path = "health/alive"
    }
  }
}

akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cinnamon.akka.dispatchers {
  basic-information {
    names = ["*"]
  }
  time-information {
    names = ["*"]
  }
}

akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cinnamon.chmetrics {
  reporters += elasticsearch-reporter
  elasticsearch-reporter {
    hosts = ["http://"${ELASTICSEARCH_HOST}":9200"]
    basic-auth {
      username = "elastic"
      password = "changeme"
    }
    frequency = 10s
  }
}

cassandra-journal {
  contact-points = ["localhost"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "sagaakka"
  keyspace = ${?CASSANDRA_KEYSPACE}
}

cassandra-snapshot-store {
  contact-points = ["localhost"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "sagaakka_snapshot"
  keyspace = ${?CASSANDRA_SNAPSHOT_KEYSPACE}
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
}

SagaConfig {
  http {
    interface = "0.0.0.0"
    port = 8081
    port = ${?HTTP_PORT}
  }

  readSideConfig {
    producerParallelism = 1
    idleTimeout = 10 seconds
  }

  cassandraConfig {
    contactPoints = "127.0.0.1"
    contactPoints = ${?CASSANDRA_CONTACT_POINTS}
    port = 9042
    port = ${?CASSANDRA_PORT}
    username = "cassandra"
    username = ${?CASSANDRA_USERNAME}
    password = "nUqt36Z2sWW0"
    password = ${?CASSANDRA_PASSWORD}
  }
}

