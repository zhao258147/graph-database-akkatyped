akka {

  extensions = [akka.persistence.Persistence]

  actor {
    provider = "cluster"
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }

    serialization-bindings {
      "com.example.user.UserNodeEntity$UserCommand" = jackson-json
      "com.example.user.UserNodeEntity$UserReply" = jackson-json
      "com.example.user.UserNodeEntity$UserEvent" = jackson-json
      "com.example.user.UserNodeEntity$UserState" = jackson-json
      "com.example.user.UserNodeEntity$NodeVisitBias" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeEvent" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeState" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeCommand" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeCommandReply" = jackson-cbor
      "com.example.graph.GraphNodeEntity$EdgeDirection" = jackson-cbor
      "com.example.graph.GraphNodeEntity$Edge" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$NodeInfo" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$NodeReadSideCommand" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$RelatedNodeQueryResponse" = jackson-cbor
      "com.example.graph.readside.ClickReadSideActor$ClickStatCommands" = jackson-cbor
      "com.example.graph.readside.ClickReadSideActor$TrendingNodesResponse" = jackson-cbor
    }
  }

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      hostname = ${?REMOTE_HOST_NAME}
      port = 2553
      port = ${?REMOTE_PORT}
    }
  }


  cluster {
    seed-nodes = [
      "akka://RayDemo@127.0.0.1:25520"]
    roles = ["saga"]
  }

  management {
    http.port = 8559
  }
}

akka.persistence.journal.plugin = "cassandra-journal"

cassandra-journal {
  contact-points = ["localhost"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "graphakka"
  keyspace = ${?CASSANDRA_KEYSPACE}
}

SagaConfig {
  http {
    interface = "0.0.0.0"
    port = 8083
    port = ${?HTTP_PORT}
  }

  readSideConfig {
    producerParallelism = 1
    idleTimeout = 10 seconds
  }

  cassandraConfig {
    contactPoints = "127.0.0.1"
    port = 9042
    username = "cassandra"
    username = ${?CASSANDRA_USERNAME}
    password = "nUqt36Z2sWW0"
    password = ${?CASSANDRA_PASSWORD}
  }

  userEntityParams {
    numberOfSimilarUsers = 30
    numberOfSimilarUsers = ${?NUMBER_SIMILAR_USERS}
    numberOfViewsToCheck = 30
    numberOfViewsToCheck = ${?NUMBER_VIEWS_TO_CHECK}
    labelWeightFilter = 150
    labelWeightFilter = ${?LABEL_WEIGHT_FILTER}
    nodeBookmarkBias = 5
    nodeBookmarkBias = ${?NODE_BOOKMARK_BIAS}
    userBookmarkBias = 2
    userBookmarkBias = ${?USER_BOOKMARK_BIAS}
    nodeVisitBias = 1
    nodeVisitBias = ${?NODE_VISIT_BIAS}
    nodeSearchBias = 3
    nodeSearchBias = ${?NODE_SEARCH_BIAS}
  }

  nodeEntityParams {
    numberOfRecommendationsToTake = 20
    numberOfRecommendationsToTake = ${?NUMBER_RECOMMENDATIONS}
    numberOfSimilarUsersToTake = 3
    numberOfSimilarUsersToTake = ${?NUMBER_SIMILAR_USERS}
    similarUserEdgeWeightFilter = 500
    similarUserEdgeWeightFilter = ${?SIMILAR_USER_EDGE_WEIGHT_FILTER}
    clickRecorderIncrementalClicks = 10
    clickRecorderIncrementalClicks = ${?CLICK_INCREMENTAL_CLICKS}
    clickRecorderIncrementalTimeMS = 60000
    clickRecorderIncrementalTimeMS = ${?CLICK_INCREMENTAL_TIME}
    edgeWeightFilter = 200
    edgeWeightFilter = ${?EDGE_WEIGHT_FILTER}
    numberOfUniqueVisitorsToKeep = 10000
    numberOfUniqueVisitorsToKeep = ${?NUMBER_UNIQUE_VISITORS}
    numberOfUpdatedVisitorLabelsToKeep = 500
    numberOfUpdatedVisitorLabelsToKeep = ${?NUMBER_UPDATED_VISITOR_LABELS}
  }
}

