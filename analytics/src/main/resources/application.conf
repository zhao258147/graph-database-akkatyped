akka {

  extensions = [akka.persistence.Persistence]

  actor {
    provider = "cluster"
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
    }

    serialization-bindings {
      "com.example.user.UserNodeEntity$UserCommand" = jackson-json
      "com.example.user.UserNodeEntity$UserReply" = jackson-json
      "com.example.user.UserNodeEntity$UserEvent" = jackson-json
      "com.example.user.UserNodeEntity$UserState" = jackson-json
      "com.example.user.UserNodeEntity$NodeVisitBias" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeEvent" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeState" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeCommand" = jackson-cbor
      "com.example.graph.GraphNodeEntity$GraphNodeCommandReply" = jackson-cbor
      "com.example.graph.GraphNodeEntity$EdgeDirection" = jackson-cbor
      "com.example.graph.GraphNodeEntity$Edge" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$NodeInfo" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$NodeReadSideCommand" = jackson-cbor
      "com.example.graph.readside.NodeReadSideActor$RelatedNodeQueryResponse" = jackson-cbor
      "com.example.graph.readside.ClickReadSideActor$ClickStatCommands" = jackson-cbor
      "com.example.graph.readside.ClickReadSideActor$TrendingNodesResponse" = jackson-cbor
    }
  }

  cluster {
    roles = ["analytics"]
    sharding {
      role = "analytics"
      passivate-idle-entity-after = 1200s
    }
  }

  remote {
    artery {
      transport = tcp

      canonical {
        # override localhost with node host address
        hostname = "<getHostAddress>"
        port = 25520
      }
    }
  }

  discovery {
    kubernetes-api {
      pod-label-selector = "app=%s"
    }
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        service-name = "graph"
        service-name = ${?APPLICATION_NAME}
        required-contact-point-nr = 1
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINTS}
        discovery-method = kubernetes-api

      }
    }

    health-checks {
      readiness-checks {
        # Default health check for cluster. Overwrite the setting to replace it with
        # your implementation or set it to "" (empty string) to disable this check.
        cluster-membership = "akka.management.cluster.scaladsl.ClusterMembershipCheck"
      }
      readiness-path = "health/ready"
      liveness-path = "health/alive"
    }
  }
}

akka.persistence.journal.plugin = "cassandra-journal"
akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

cinnamon.akka.dispatchers {
  basic-information {
    names = ["*"]
  }
  time-information {
    names = ["*"]
  }
}

akka.persistence.journal.plugin = "cassandra-journal"

cassandra-journal {
  contact-points = ["localhost"]
  contact-points = ${?CASSANDRA_CONTACT_POINTS}
  port = 9042
  port = ${?CASSANDRA_PORT}
  keyspace = "userakka"
  keyspace = ${?CASSANDRA_KEYSPACE}
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
  authentication {
    username = "cassandra"
    username = ${?CASSANDRA_USERNAME}
    password = "ojuMHFXKQf3mAGRKwfJH"
    password = ${?CASSANDRA_PASSWORD}
  }
}

AnalyticsConfig {
  searchURL = "http://39.102.47.243:80/insert"
  searchURL = ${?SEARCH_URL}

  http {
    interface = "0.0.0.0"
    port = 8081
    port = ${?HTTP_PORT}
  }

  readSideConfig {
    producerParallelism = 1
    idleTimeout = 10 seconds
  }

  cassandraConfig {
    contactPoints = "127.0.0.1"
    contactPoints = ${?CASSANDRA_CONTACT_POINTS}
    port = 9042
    port = ${?CASSANDRA_PORT}
    username = "cassandra"
    username = ${?CASSANDRA_USERNAME}
    password = "ojuMHFXKQf3mAGRKwfJH"
    password = ${?CASSANDRA_PASSWORD}
  }

}

